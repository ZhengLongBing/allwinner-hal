//! Allwinner D1 ROM runtime.
//!
//! # Usage
//!
//! Here's an sample usage of this crate:
//!
//! ```no_run
//! use allwinner_rt::{entry, Clocks, Peripherals};
//!
//! #[entry]
//! fn main(p: Peripherals, c: Clocks) {
//!     /* code */
//! }
//! ```
#![feature(naked_functions)]
#![no_std]

#[macro_use]
mod macros;

#[cfg(any(feature = "nezha", feature = "lichee"))]
mod mctl;
#[cfg(any(feature = "nezha", feature = "lichee"))]
/// Dram initializing function.
pub use mctl::init as dram_init;

pub use allwinner_rt_macros::entry;

pub mod soc {
    pub mod d1;
}

/// eGON.BT0 identifying structure.
// TODO verify with original ROM source code
#[repr(C)]
pub struct EgonHead {
    pub magic: [u8; 8],
    pub checksum: u32,
    pub length: u32,
    pub pub_head_size: u32,
    pub pub_head_version: [u8; 4],
    pub return_addr: u32,
    pub run_addr: u32,
    pub boot_cpu: u32,
    pub platform: [u8; 8],
}

/// Jump over head data to executable code.
///
/// # Safety
///
/// Naked function.
///
/// NOTE: `mxstatus` is a custom T-Head register. Do not confuse with `mstatus`.
/// It allows for configuring special eXtensions. See further below for details.
#[naked]
#[unsafe(link_section = ".text.entry")]
unsafe extern "C" fn start() -> ! {
    unsafe {
        const STACK_SIZE: usize = 4 * 1024;
        #[unsafe(link_section = ".bss.uninit")]
        static mut STACK: [u8; STACK_SIZE] = [0; STACK_SIZE];
        core::arch::naked_asm!(
            // Enable T-Head ISA extension
            "li     t1, 1 << 22",
            "csrs   0x7C0, t1",
            // Invalidate instruction and data cache, branch history table
            // and branch target buffer table
            "li     t1, 0x30013",
            "csrs   0x7C2, t1",
            // Disable interrupt
            "csrw   mie, zero",
            // Prepare programming language stack
            "la     sp, {stack}
        li      t0, {stack_size}
        add     sp, sp, t0",
            // Clear `.bss` section
            "la     t1, sbss
        la      t2, ebss
    3:  bgeu    t1, t2, 3f
        sd      zero, 0(t1)
        addi    t1, t1, 8
        j       3b
    3:  ",
            // Start Rust main function
            "call   {main}",
            // Platform halt if main function returns
        "3: wfi
            j       3b",
            stack      =   sym STACK,
            stack_size = const STACK_SIZE,
            main       =   sym main,
        )
    }
}

#[rustfmt::skip]
unsafe extern "Rust" {
    // This symbol is generated by `#[entry]` macro in allwinner-rt or other ROM-stage software packages.
    fn main();
}

#[unsafe(no_mangle)]
#[unsafe(link_section = ".head.egon")]
static EGON_HEAD: EgonHead = EgonHead {
    magic: *b"eGON.BT0",
    checksum: 0x5F0A6C39, // real checksum will be filled by blob generator
    length: 0x8000,
    pub_head_size: 0,
    pub_head_version: *b"3000",
    return_addr: 0,
    run_addr: 0,
    boot_cpu: 0,
    platform: *b"\0\03.0.0\0",
};

core::arch::global_asm! {
    ".section .text.head",
    "head_jump:",
    "j  {}",
    sym start,
}

#[cfg(any(feature = "nezha", feature = "lichee"))]
pub use {
    self::soc::d1::{__rom_init_params, Peripherals},
    allwinner_hal::ccu::Clocks,
};

#[cfg(not(any(feature = "nezha", feature = "lichee")))]
pub struct Peripherals {}
#[cfg(not(any(feature = "nezha", feature = "lichee")))]
pub struct Clocks {}
#[cfg(not(any(feature = "nezha", feature = "lichee")))]
#[doc(hidden)]
pub fn __rom_init_params() -> (Peripherals, Clocks) {
    (Peripherals {}, Clocks {})
}
